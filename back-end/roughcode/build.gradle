// query dsl 버전 정보 추가
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'

    // query dsl plugin 추가
    id("com.ewerk.gradle.plugins.querydsl") version "1.0.10"

    id 'jacoco'
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.10'
}

group = 'com.cody'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

// query dsl 추가
apply plugin: "com.ewerk.gradle.plugins.querydsl"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'com.google.code.gson:gson:2.9.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation('com.auth0:java-jwt:4.2.1')
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'org.hibernate:hibernate-validator:6.2.5.Final'
    testImplementation 'org.glassfish:jakarta.el'

    // mongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // web risk
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.16.0'
    implementation 'com.google.cloud:google-cloud-webrisk:2.14.0'

    // spring batch
    implementation("org.springframework.boot:spring-boot-starter-batch")
    implementation("org.springframework.boot:spring-boot-starter-quartz")
    testImplementation 'org.springframework.batch:spring-batch-test'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // query dsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    compileOnly 'org.hibernate.orm:hibernate-jpamodelgen:6.2.1.Final'
}

// query dsl 설정 추가
def querydslDir = "$buildDir/generated/querydsl"

// jpa 사용 여부와 사용할 경로 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
// build 시 사용할 sourceSet 추가
sourceSets {
    main.java.srcDir querydslDir
}
// query dsl 컴파일 시 사용할 옵션 설정
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
// query dsl이 compileClassPath를 상속하도록 설정
configurations {
    querydsl.extendsFrom compileClasspath
}

test {
    useJUnitPlatform() // JUnit5를 사용하기 위한 설정
    finalizedBy 'jacocoTestReport' // Test 이후 커버리지가 동작하도록 finalizedBy 추가
}

jacocoTestReport {
    dependsOn test
    reports{
        html.enabled false
        csv.enabled false
        xml.enabled true

        xml.destination file("../jacoco/jacoco.xml")
    }


    finalizedBy 'jacocoTestCoverageVerification' // 커버리지 작동 이후 검증하도록 설정
}