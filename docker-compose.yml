version: "3.8"

services:
  frontend:
    build:
      # 어디에서 도커를 시작할 것인가
      context: ./front-end
      dockerfile: Dockerfile
    image: frontend
    restart: always
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx

    restart: always # 개발자가 stop 하는 경우를 제외하고 꺼지면 자동으로 다시 실행하겠다.
    volumes:
      - ./conf.d/nginx:/etc/nginx/conf.d # Nginx 설정 파일 위치 공유 : 로컬에 미리 작성해준 설정을 Nginx 폴더와 공유
      - ./app/build:/usr/share/nginx/html # React App을 npm run build로 만든 build된 파일들이 있는 위치 맵핑
      - work dir/certbot/conf:/etc/nginx/ssl
      - work dir/certbot/data:/var/www/certbot

    ports:
      - "80:80"
      - "443:443"
    expose:
      - "80"
      - "443"
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    networks:
      - app-network

  certbot: # certbot 서비스 추가
    image: certbot/certbot:latest
    container_name: certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email dongsu712@naver.com --agree-tos --no-eff-email -d rough-code.com -d www.rough-code.com
    depends_on:
      - nginx
    # restart: unless-stopped
    volumes:
      - work dir/certbot/conf:/etc/letsencrypt
      - work dir/certbot/logs:/var/log/letsencrypt
      - work dir/certbot/data:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-network:
    driver: bridge
